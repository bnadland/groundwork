// Code generated by go-bindata.
// sources:
// templates/layout.html
// templates/pages/homepage.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x41\x72\xc3\x20\x0c\x45\xf7\x3e\x85\xaa\x75\x09\xed\xae\x0b\xf0\x29\x7a\x01\x02\x4a\x50\x8a\xb1\x8b\x94\xa4\x1e\x8f\xef\xde\x71\xdc\xce\x64\xc3\x20\xfd\xff\xfe\xcc\x97\x7b\x49\x63\xd4\x79\x22\xc8\x3a\x94\xde\x6d\x2f\xc4\x12\x44\x3c\xd6\xd1\x5c\x04\xa1\x84\x7a\xf6\x48\x15\xfb\xce\x65\x0a\xa9\xef\x00\x00\xdc\x40\x1a\x20\xe6\xd0\x84\xd4\xe3\x55\x4f\xe6\x03\xc1\x3e\x8b\x59\x75\x32\xf4\x7d\xe5\x9b\xc7\x1f\x73\x0d\x26\x8e\xc3\x14\x94\x8f\x85\x10\xe2\x58\x95\xaa\x7a\x64\xf2\x94\xce\x84\xcf\x64\x0d\x03\x79\xbc\x31\xdd\xa7\xb1\xe9\x93\xf9\xce\x49\xb3\x4f\x74\xe3\x48\xe6\x31\xbc\x02\x57\x56\x0e\xc5\x48\x0c\x85\xfc\xfb\xe1\xed\x3f\x4a\x59\x0b\xf5\xcb\x72\xf8\xdc\x3e\xeb\xea\xec\xbe\xd9\xd5\xc2\xf5\x0b\x1a\x15\x8f\xa2\x73\x21\xc9\x44\x8a\x90\x1b\x9d\x3c\xda\x28\x62\x87\xc0\xf5\x10\x45\xb6\xde\x76\x2f\xee\x8e\x63\x9a\xfb\x6e\x59\x66\xa6\x92\xd6\xb5\x73\x12\x1b\x4f\x0a\x89\x4e\xd4\x40\x5a\xf4\x68\x2f\x7f\xe8\x45\xb0\x77\x76\x37\x6c\x11\x3b\xeb\xec\xe3\xd0\xdd\x6f\x00\x00\x00\xff\xff\xf9\x7a\x80\x11\x79\x01\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 377, mode: os.FileMode(420), modTime: time.Unix(1496511113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPagesHomepageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\xf3\xd2\x30\x10\xc5\xef\xfd\x14\x3b\xf5\x80\xce\x2c\x42\x52\x52\x6d\x2d\x3d\xa8\x33\x1e\x75\x3c\xe8\x38\x0c\x87\xb4\x89\x58\x8d\x0d\x93\xa4\x70\x60\xf8\xee\x4e\x6a\x29\x05\x6d\xf9\x5f\x60\xbb\xef\x97\x7d\x9b\x37\xc9\xac\x2c\x5d\xa5\x6b\x28\x15\xb7\x76\x1d\x1a\x7d\x0c\xf3\x00\x00\x20\x13\xd5\xe1\xd2\x2d\xb5\x6a\x7e\xd7\x9d\xf0\x8f\xc8\x8d\x18\x48\xff\x93\xe7\x9d\xcb\x1d\xd6\xa2\x25\xaf\x0f\xdc\x5e\xe8\x9f\x76\x5e\x70\x13\xe6\xd9\xe2\x6f\xff\x6e\xee\x42\x54\x87\xc1\x16\xd7\xcf\xae\xcc\x16\x9d\x53\x1e\x04\x99\x2d\x4d\xb5\x77\x79\x50\xea\xda\x3a\x28\xb8\x79\xcf\x1d\x87\x35\x9c\xda\x13\x8a\x17\x52\xd9\x14\x36\xe1\x67\x29\x42\x84\xf0\xad\x6a\xa4\xff\xff\x26\x95\xd2\x47\x5f\x7d\x30\x52\xd6\xbe\xf8\xd4\x98\xbd\x6a\xc5\x8f\x86\xd7\x3b\x19\x6e\xb1\x9d\x21\xb8\xe3\x56\x3a\x3f\xe5\xd4\x6f\xd5\x0e\x4e\x61\xf6\x0c\xf4\x77\xf8\xa2\x9d\xb4\x33\xec\x45\x7f\x22\x85\x0d\xa1\x08\x24\x41\x88\x10\x18\x02\x45\x88\xb6\x57\xa6\xe0\xe5\xaf\x9d\xd1\x4d\x2d\xde\x69\xa5\x4d\x0a\x9b\x9b\x10\x66\x66\x57\xf0\xe7\x94\x31\x84\x24\x41\x20\x11\x45\x58\xbe\xa4\x2f\x06\x2e\x57\x8c\xad\x10\x48\x4c\x11\x68\xc4\x26\xb0\x76\x1a\x5d\xc6\x08\xaf\xe3\x09\xec\x15\xf3\x6b\xd3\xee\x67\x14\x23\x2c\x42\x20\x4b\xef\xca\x1e\xba\x12\x96\x20\xc4\xab\x0e\xeb\xa9\x61\x1e\xda\x08\x69\x1e\x64\x91\x24\xe8\x93\x20\x4f\x89\x61\x04\xba\x0d\x61\x04\xba\x8d\x60\x04\xba\x0b\x60\xca\xaf\xbf\x3e\x99\xba\xfc\xd7\x4a\xb8\x1f\x29\x90\xb6\x7d\xde\x06\xe7\x37\xfe\xa9\x77\xef\xfb\x4f\x00\x00\x00\xff\xff\x5e\x73\xd8\x34\xc4\x03\x00\x00")

func templatesPagesHomepageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPagesHomepageHtml,
		"templates/pages/homepage.html",
	)
}

func templatesPagesHomepageHtml() (*asset, error) {
	bytes, err := templatesPagesHomepageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/pages/homepage.html", size: 964, mode: os.FileMode(420), modTime: time.Unix(1496511113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layout.html":         templatesLayoutHtml,
	"templates/pages/homepage.html": templatesPagesHomepageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
		"pages": &bintree{nil, map[string]*bintree{
			"homepage.html": &bintree{templatesPagesHomepageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
